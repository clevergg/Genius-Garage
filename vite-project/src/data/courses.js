export const courses = [
  {
    id: 1,
    name: "Первый курс",
    subjects: [
      {
        id: 1,
        name: "Программирование",
        description: "Основы программирования и алгоритмы",
        topics: [
          {
            id: 101,
            title: "Введение в HTML",
            content: `# Введение в HTML

## Что такое HTML
HTML (HyperText Markup Language) — это язык разметки, который используется для создания структуры веб-страниц. С его помощью мы можем добавлять текст, изображения, ссылки, видео и другие элементы на веб-страницы. HTML не является языком программирования — он отвечает только за разметку и структуру. 

# Структура HTML-документа

Основные теги, которые используются для создания страницы, обязательны для всех HTML-документов:
\`\`\`html
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Заголовок страницы</title>
</head>
<body>
  <!-- Здесь будет содержимое страницы -->
</body>
</html>
\`\`\`
# !DOCTYPE html — декларация, которая указывает браузеру, что используется HTML5.
# html — корневой элемент документа.
# head — содержит метаинформацию о странице (настройки кодировки, название и другие служебные данные).
# meta charset="UTF-8" — указывает, что текст на странице должен кодироваться с помощью UTF-8.
# title — заголовок страницы, отображаемый на вкладке браузера.
# body — основное содержимое страницы, видимое пользователю.

### 2. Основные теги HTML

Заголовки
Для структурирования текста на странице используются заголовки и параграфы. Заголовки в HTML бывают шести уровней от h1 до h6, где h1 — самый важный заголовок.
\`\`\`html
  <h1>Главный заголовок</h1>
  <h2>Подзаголовок</h2>
  <p>Это абзац текста. Параграфы позволяют разбивать текст на блоки для лучшего восприятия.</p>
\`\`\`
# Ссылки
Тег a (anchor) используется для создания гиперссылок. Атрибут href задает адрес, на который должна вести ссылка.
\`\`\`html
<a href="https://www.example.com">Перейти на сайт</a>
\`\`\`
# Изображения
Для вставки изображений используется тег img. Он не имеет закрывающего тега, а его атрибуты src (source) и alt (alternative) задают путь к изображению и описание на случай, если изображение не загрузится.
\`\`\`html
<img src="image.jpg" alt="Описание изображения">
\`\`\`
# Списки
HTML поддерживает два типа списков: ненумерованные (ul) и нумерованные (ol). Каждый элемент списка помещается в тег li.
\`\`\`html
<ul>
  <li>Первый элемент списка</li>
  <li>Второй элемент списка</li>
</ul>

<ol>
  <li>Первый элемент нумерованного списка</li>
  <li>Второй элемент нумерованного списка</li>
</ol>
\`\`\`
## 3. Блочная модель
Блочные и строчные элементы
В HTML есть два типа элементов: блочные и строчные.
Блочные элементы (например, div, section, article) занимают всю доступную ширину родительского элемента.
Строчные элементы (например, span, a, strong) занимают только необходимое им пространство и располагаются в одной строке с другими строчными элементами.
Отступы, границы и поля
Блочная модель CSS описывает, как элементы отображаются и взаимодействуют на странице. Основные свойства:
margin: отступ снаружи элемента.
padding: внутренний отступ (внутри границы элемента).
border: рамка элемента.

## 4. Семантика HTML
Семантические теги
Семантические теги — это элементы, которые явно описывают их содержание. Примеры таких тегов:
header — верхняя часть страницы (заголовок).
footer — нижняя часть страницы (подвал).
nav — меню навигации.
article — независимый блок контента.
section — раздел страницы.
aside — дополнительная информация.

### 1. Введение в CSS
CSS (Cascading Style Sheets) — это язык, с помощью которого можно задавать стиль HTML-элементов. Он позволяет изменить внешний вид веб-страницы: цвета, шрифты, размеры, отступы и многое другое.
Как подключить CSS к HTML
Есть три способа подключить CSS к HTML-документу:
Встроенные стили (inline styles) — стили задаются непосредственно в HTML-тегах с помощью атрибута style.
\`\`\`html
<h1 style="color: red;">Заголовок</h1>

Внутренние стили (internal styles) — стили задаются внутри тега <style> в разделе <head>.
html
Копировать код
<html>
<head>
  <style>
    h1 {
      color: red;
    }
  </style>
</head>
<body>
  <h1>Заголовок</h1>
</body>
</html>
\`\`\`
## Внешние стили (external styles) — подключаются через отдельный CSS-файл с помощью тега link.
\`\`\`html
<html>
<head>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <h1>Заголовок</h1>
</body>
</html>
\`\`\`
В файле styles.css будет написан код:
\`\`\`css
h1 {
  color: red;
}
\`\`\`
### 2. Основные CSS-свойства
Теперь давай изучим несколько базовых CSS-свойств для стилизации элементов.
Цвет текста
С помощью свойства color можно задать цвет текста.
\`\`\`css
h1 {
  color: blue;
}
\`\`\`
-Цвет фона
Свойство background-color отвечает за цвет фона элемента.
\`\`\`css
body {
  background-color: lightgray;
}
\`\`\`
-Размер шрифта
Свойство font-size позволяет изменять размер текста.
\`\`\`css
p {
  font-size: 16px;
}
\`\`\`
### 3. Блочные и строчные элементы — изменение размеров и отступов
Размер элемента
Свойства width и height изменяют ширину и высоту элемента.
\`\`\`css
div {
  width: 200px;
  height: 100px;
}
\`\`\`
# Внешние отступы margin
С помощью margin можно задать расстояние от элемента до других элементов.
\`\`\`css
h1 {
  margin-top: 20px;
  margin-bottom: 10px;
}
\`\`\`
# Внутренние отступы padding
Свойство padding задает расстояние от содержимого элемента до его границ.
\`\`\`css
div {
  padding: 15px;
}
\`\`\`
### 4. Пример стилизации простой страницы
Вот пример страницы, где применены базовые стили:
\`\`\`html
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Пример стилизации</title>
  <style>
    body {
      background-color: lightyellow;
      font-family: Arial, sans-serif;
    }

    h1 {
      color: darkblue;
      text-align: center;
    }

    p {
      font-size: 18px;
      color: darkgreen;
      margin: 10px 20px;
    }

    div {
      width: 300px;
      padding: 20px;
      margin: 20px auto;
      border: 2px solid black;
      background-color: white;
    }
  </style>
</head>
<body>
  <h1>Заголовок страницы</h1>
  <p>Это пример простой стилизации HTML с помощью CSS. Мы изменили цвета текста, фона и добавили отступы.</p>

  <div>
    Это блок с границей, внутренними и внешними отступами.
  </div>
</body>
</html>
\`\`\`     
### Полезные ресурсы
- [Doka: HTML](https://doka.guide/html/)
- [DeveloperMozzila: Html](https://developer.mozilla.org/ru/docs/Learn_web_development/Core/Structuring_content/Basic_HTML_syntax)

`
          }, 
          {
            id: 113,
            title: "Введение Flex и Grid ",
            content: `# 1. Flexbox: Введение

## Flexbox (Flexible Box) — это метод компоновки, разработанный для упрощения верстки сложных интерфейсов. Он позволяет эффективно управлять распределением пространства между элементами и их выравниванием внутри контейнера, даже если их размер неизвестен или динамически меняется.

## Основные термины Flexbox:
Flex-контейнер — элемент, к которому применяется свойство display: flex;. Внутри него все дочерние элементы становятся flex-элементами.
Flex-элементы — элементы, которые находятся внутри flex-контейнера.

# Свойства Flexbox:
display: flex; — активирует Flexbox для контейнера.
flex-direction — определяет направление размещения элементов:
row (по умолчанию) — горизонтально.
column — вертикально.
row-reverse и column-reverse — обратные направления.
\`\`\`css
.container {
  display: flex;
  flex-direction: row;
}
\`\`\` 
justify-content — определяет выравнивание элементов по главной оси (горизонтали или вертикали в зависимости от направления).
flex-start — элементы выравниваются по началу контейнера.
flex-end — элементы выравниваются по концу.
center — элементы центрируются.
space-between — равномерное распределение с пробелами между элементами.
space-around — пробелы вокруг элементов.

### Пример использования Flexbox:
\`\`\`css
.container {
      display: flex;
      justify-content: space-around;
      align-items: center;
      height: 200px;
      background-color: lightgray;
}
.item {
      background-color: coral;
      padding: 20px;
      border: 2px solid black;
}
\`\`\`
\`\`\`css
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Пример Flexbox</title>
  <style>
    .container {
      display: flex;
      justify-content: space-around;
      align-items: center;
      height: 200px;
      background-color: lightgray;
    }
    .item {
      background-color: coral;
      padding: 20px;
      border: 2px solid black;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="item">Элемент 1</div>
    <div class="item">Элемент 2</div>
    <div class="item">Элемент 3</div>
  </div>
</body>
</html>
\`\`\` 
### 2.CSS Grid: Введение
Grid Layout — это мощный инструмент для создания сеточных макетов. В отличие от Flexbox, который работает только в одном направлении (по оси), Grid позволяет строить макеты по двум осям: горизонтальной и вертикальной.
Основные термины Grid:
Grid-контейнер — элемент, к которому применяется свойство display: grid;. Внутри контейнера создается сетка.
Grid-элементы — элементы, которые находятся внутри Grid-контейнера.
## Свойства Grid:
display: grid; — активирует Grid для контейнера.
grid-template-columns и grid-template-rows — задают количество и размер столбцов и строк.
Пример: grid-template-columns: 200px 1fr; — два столбца: первый фиксированный, второй — гибкий (растягивается на оставшееся пространство).
\`\`\`css
.container {
  display: grid;
  grid-template-columns: 200px 1fr;
}

grid-gap — задает расстояние между элементами.
Пример: grid-gap: 20px;
css
Копировать код
.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 20px;
}
\`\`\`
justify-items и align-items — управляют выравниванием элементов внутри ячеек (по горизонтали и вертикали).
Пример: justify-items: center; align-items: center;
grid-area — позволяет элементам занимать несколько строк или столбцов.
Пример: grid-column: 1 / 3; — элемент займет первый и второй столбцы.

## Пример использования Grid Layout:
\`\`\`html
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Пример Grid Layout</title>
</head>
<body>
  <div class="container">
    <div class="item item-large">Элемент 1 (большой)</div>
    <div class="item">Элемент 2</div>
    <div class="item">Элемент 3</div>
    <div class="item">Элемент 4</div>
  </div>
</body>
</html>
\`\`\`
\`\`\`css
.container {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      grid-gap: 20px;
      background-color: lightgray;
    }
.item {
      background-color: coral;
      padding: 20px;
      border: 2px solid black;
    }
.item-large {
      grid-column: 1 / 3;
}
\`\`\`
\`\`\`css
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Пример Grid Layout</title>
</head>
<body>
  <div class="container" style='display: grid; grid-template-columns: 1fr 1fr 1fr; grid-gap: 20px; background-color: lightgray;'>
    <div class="item item-large" style='grid-column: 1 / 3;'>Элемент 1 (большой)</div>
    <div class="item" style='background-color: coral; padding: 10px; border: 2px solid black;'>Элемент 2</div>
    <div class="item" style='background-color: coral; padding: 10px; border: 2px solid black;'>Элемент 3</div>
    <div class="item" style='background-color: coral; padding: 10px; border: 2px solid black;'>Элемент 4</div>
  </div>
</body>
</html>
\`\`\`
`
          },
          {
            id: 114,
            title: "Позиционирование элементов в CSS",
            content: `# Позиционирование элементов в CSS

## Добро пожаловать в подробный урок по позиционированию элементов в CSS! В этом уроке мы рассмотрим следующие темы:

1.Позиционирование элементов. Введение
2.Понятие потока и статическое позиционирование
3.Относительное позиционирование
4.Абсолютное позиционирование
5.z-index
6.Фиксированное позиционирование
7.Липкое позиционирование
8.Свойство inset, упрощающее жизнь

### 1.Позиционирование элементов. Введение
Позиционирование в CSS — это мощный инструмент, который позволяет управлять расположением элементов на веб-странице. С его помощью можно создавать сложные макеты, накладывать элементы друг на друга и контролировать их поведение при прокрутке страницы.
Основные типы позиционирования:

1.Статическое (static)
2.Относительное (relative)
3.Абсолютное (absolute)
4.Фиксированное (fixed)
5.Липкое (sticky)
Каждый из этих типов имеет свои особенности и применяется в различных ситуациях.

### 2.Понятие потока и статическое позиционирование
Понятие потока
Поток документа — это естественное расположение элементов на веб-странице. Элементы располагаются в порядке, заданном в HTML-коде:

#Блочные элементы (например, div, p, h1) занимают всю ширину родителя и располагаются один под другим.
#Строчные элементы (например, span, a, img) располагаются слева направо внутри блочных элементов.

## 3.Относительное позиционирование
Свойство position: relative позволяет смещать элемент относительно его исходного положения в потоке.
Синтаксис:

\`\`\`css
.element {
  position: relative;
  top: 10px;
  left: 20px;
}
\`\`\`
Объяснение:
top: Смещает элемент вниз на указанное значение (положительное значение) или вверх (отрицательное значение).
left: Смещает элемент вправо (положительное значение) или влево (отрицательное значение).
Пример:

\`\`\`html
<div class="relative-element">Относительно позиционированный элемент</div>
\`\`\`
\`\`\`css
.relative-element {
  position: relative;
  top: 10px;
  left: 20px;
  background-color: lightblue;
}
\`\`\`

## 4.Абсолютное позиционирование
Свойство position: absolute позволяет размещать элемент относительно ближайшего предка с позиционированием, отличным от static, или относительно окна браузера, если таких предков нет.
Синтаксис:

\`\`\`css
.element {
  position: absolute;
  top: 0;
  left: 0;
}
\`\`\`

# Объяснение:
Элемент позиционируется относительно контейнера-предка с позицией relative, absolute, fixed или sticky.
Если таких предков нет, элемент позиционируется относительно окна браузера.
Абсолютно позиционированные элементы удаляются из потока документа.

Пример:
\`\`\`html
<div class="container">
  <div class="absolute-element">Абсолютный элемент</div>
</div>
\`\`\`
\`\`\`css
.container {
  position: relative; /* Создает контекст позиционирования */
  width: 300px;
  height: 200px;
  background-color: #f0f0f0;
}

.absolute-element {
  position: absolute;
  top: 20px;
  left: 30px;
  background-color: #ff6347;
  padding: 10px;
}
\`\`\`

## 5.z-index
Свойство z-index контролирует порядок наложения позиционированных элементов по оси Z (глубине).
Синтаксис:
\`\`\`css
.element {
  position: relative; /* или absolute, fixed, sticky */
  z-index: 10;
}
\`\`\`
## 6.Фиксированное позиционирование
Свойство position: fixed прикрепляет элемент к определенной позиции в окне браузера, независимо от прокрутки страницы.

Синтаксис:
\`\`\`css
.element {
  position: fixed;
  top: 0;
  right: 0;
}
\`\`\`
Характеристики:

Элемент всегда остается на месте при прокрутке.
Позиционируется относительно окна браузера.
Удаляется из потока документа.

## 7.Липкое позиционирование
Свойство position: sticky сочетает в себе поведение relative и fixed. Элемент ведет себя как относительно позиционированный до определенного порога, после которого он становится фиксированным.
Синтаксис:

\`\`\`css
.element {
  position: sticky;
  top: 0;
}
\`\`\`
Характеристики:

Элемент "прилипает" к заданной позиции при прокрутке.
Позиционируется относительно ближайшего прокручиваемого предка.

### Пример 1: Абсолютное позиционирование внутри относительного контейнера
\`\`\`html
<div class="relative-container">
  <div class="absolute-box">Абсолютный блок</div>
</div>
\`\`\`
\`\`\`css
.relative-container {
  position: relative;
  width: 400px;
  height: 300px;
  background-color: #e0e0e0;
}
.absolute-box {
  position: absolute;
  inset: 10px 20px; /* top: 10px; right: 20px; bottom: 10px; left: 20px; */
  background-color: #ff8c00;
}
\`\`\`
Объяснение:
.absolute-box позиционируется внутри .relative-container с отступами сверху и снизу по 10px, справа и слева по 20px.

# Полезные материалы
- [DeveloperMozzila - position css](https://developer.mozilla.org/ru/docs/Web/CSS/position)

`
          },
          {
            id: 115,
            title: "Переменные и типы данных Javascript",
            content: `# Переменные и типы данных

## Основные типы данных:
- Целые числа (int)
- Числа с плавающей точкой (float)
- Строки (string)
- Логические значения (boolean)

## Объявление переменных:
\`\`\`javascript
let age = 25;
const name = "Иван";
var isStudent = true;
\`\`\`

### Правила именования переменных:
1. Используйте осмысленные имена
2. Начинайте с буквы
3. Используйте camelCase
4. Избегайте зарезервированных слов`
          }
        ]
      },
      {
        id: 2,
        name: "Математика",
        description: "Высшая математика и calculus",
        topics: [
          {
            id: 201,
            title: "Множества чисел",
            content: `# Основные множества чисел:
## Математика оперирует различными множествами чисел, каждое из которых является расширением предыдущего:

## Натуральные числа (ℕ): 
  Множество положительных целых чисел: {1, 2, 3, 4, ...}. Используются для счета.

## Целые числа (ℤ): 
  Множество, включающее натуральные числа, ноль и отрицательные целые числа: {..., -3, -2, -1, 0, 1, 2, 3, ...}.

## Рациональные числа (ℚ): 
  Множество чисел, которые можно представить в виде дроби p/q, где p и q — целые числа, а q ≠ 0. Включают в себя целые числа, а также конечные и периодические десятичные дроби.

## Иррациональные числа (Irr): 
  Множество чисел, которые нельзя представить в виде дроби p/q, где p и q — целые числа, а q ≠ 0. Эти числа имеют бесконечные непериодические десятичные разложения (например, √2, π, e).

## Вещественные числа (ℝ): 
  Множество, объединяющее рациональные и иррациональные числа. Представляет собой все точки на числовой прямой.

## Комплексные числа (ℂ): 
  Множество чисел вида a + bi, где a и b — вещественные числа, а i — мнимая единица (i² = -1). Расширяют множество вещественных чисел, позволяя решать уравнения, которые не имеют решений в вещественных числах.

## Операции над множествами:
  С множествами чисел можно выполнять различные операции:

## Объединение (∪): 
  Новое множество, содержащее все элементы исходных множеств.

## Пересечение (∩): 
  Новое множество, содержащее только элементы, присутствующие во всех исходных множествах.

## Разность (–):
   Новое множество, содержащее элементы первого множества, не входящие во второе.

## Дополнение: 
  Множество элементов, которые не принадлежат данному множеству (обычно рассматривается относительно некоторого универсального множества).

## Примеры:
  Объединение множества натуральных чисел и множества отрицательных целых чисел дает множество целых чисел.

### Пересечение множества четных чисел и множества нечетных чисел пустое множество.

### Разность множества вещественных чисел и множества рациональных чисел дает множество иррациональных чисел.

### Полезные ресурсы:
Учебники по математическому анализу и теории множеств.
Тема может быть расширена за счет рассмотрения свойств различных множеств чисел (счетность, плотность, полнота), аксиоматики теории множеств, и использования множеств чисел в различных областях математики. Можно также рассмотреть более экзотические множества чисел, такие как трансфинитные числа.`
          }
        ]
      },
      {
        id: 3,
        name: "Обществознание",
        description: "Основы права и строение общества",
        topics: [
          {
            id: 301,
            title: "Глобализация и её влияние на современное общество",
            content: `# Определение и сущность глобализации:

##Глобализация – это многогранный процесс, характеризующийся усилением взаимосвязи и взаимозависимости между странами и народами мира в различных областях: экономике, политике, культуре, технологиях и др. Она проявляется в увеличении международной торговли, потоков капитала, миграции людей, распространении информации и идей.

## Основные аспекты глобализации:
  Экономическая глобализация: Формирование глобального рынка товаров, услуг и капитала, рост транснациональных корпораций, интернационализация производства.

## Политическая глобализация: 
  Развитие международных организаций (ООН, ЕС, ВТО), рост международного сотрудничества, но и усиление влияния глобальных игроков (США, Китай).

## Культурная глобализация: 
  Распространение глобальной культуры (голливудские фильмы, музыка, мода), глобализация информационных потоков через интернет.

## Технологическая глобализация:
  Быстрое распространение новых технологий, доступность информации и коммуникаций.

## Влияние глобализации на современное общество:
  Глобализация имеет как положительные, так и отрицательные последствия:

### Положительные:

  Экономический рост: Увеличение международной торговли стимулирует экономический рост в развивающихся странах.

  Технологический прогресс: Глобальный обмен знаниями и технологиями способствует инновациям.

  Улучшение коммуникаций: Глобальные коммуникационные сети улучшают связь между людьми и культурами.

  Распространение демократии и прав человека: Глобализация способствует распространению демократических ценностей и защиты прав человека.

### Отрицательные:

  Угроза национальной идентичности: Распространение глобальной культуры может привести к ослаблению национальных культур и традиций.

  Неравенство: Глобализация может усилить неравенство между богатыми и бедными странами и внутри них.

  Экологические проблемы: Глобализация способствует усилению экологических проблем, таких как глобальное потепление.

  Экономическая нестабильность: Глобальные финансовые кризисы могут быстро распространяться по всему миру.

  Угроза национального суверенитета: Международные организации и транснациональные корпорации могут ограничить национальный суверенитет.

  Способы регулирования глобализации:
  Для смягчения негативных последствий глобализации необходимы международное сотрудничество и регулирование:

  Международное право: Разработка и укрепление международного права для регулирования глобальных процессов.

  Международные организации: Роль международных организаций в координации действий государств и регулировании глобальных проблем.

  Национальные политики: Разработка национальных политик, учитывающих глобальные вызовы и возможности.

### Тема глобализации очень широка и может быть углублена с помощью анализа конкретных примеров, статистических данных и различных точек зрения. Можно рассмотреть роль отдельных стран в процессе глобализации, влияние глобализации на различные социальные группы, а также перспективы развития глобализации в будущем.`
          }
        ]
      },
      {
        id: 4,
        name: "История",
        description: "История России и Европы",
        topics: [
          {
            id: 401,
            title: "Холодная война и её влияние на мир",
            content: `# Суть Холодной войны:

## Холодная война (приблизительно 1947-1991 гг.) – это период геополитической напряжённости и соперничества между двумя сверхдержавами – США и СССР, и их союзниками. Характеризовалась отсутствием прямых военных столкновений между ними, но постоянной угрозой ядерной войны, гонки вооружений, идеологическим противостоянием (капитализм против коммунизма), а также вмешательством в дела других стран.

## Основные этапы Холодной войны:

  ### Послевоенный период (1945-1950): Формирование двух блоков, начало идеологического противостояния, Берлинский кризис.

  ### Эскалация (1950-1962): Корейская война, гонка вооружений, Карибский кризис (кульминация холодной войны, момент наибольшего приближения к ядерной войне).

  ### Разрядка (1962-1979): Попытки улучшения отношений между сверхдержавами, подписание договоров об ограничении вооружений.

  ### Новая эскалация (1979-1985): Афганская война, гонка вооружений возобновляется.

  ### Завершение (1985-1991): Перестройка и гласность в СССР, распад СССР, конец Холодной войны.

## Влияние Холодной войны на мир:

  ### Холодная война оказала огромное влияние на все аспекты мировой жизни:

  ### Геополитическое разделение мира: Мир был разделён на два враждебных лагеря, что привело к образованию военных блоков (НАТО и Варшавский договор).

  ### Гонка вооружений: Привела к созданию огромных арсеналов ядерного оружия, что создавало постоянную угрозу глобальной катастрофы.

  ### Региональные конфликты: Сверхдержавы поддерживали различные стороны в региональных конфликтах по всему миру (Корея, Вьетнам, Афганистан), продолжая тем самым идеологическое противостояние.

  ### Идеологическая борьба: Идеологическое противостояние между капитализмом и коммунизмом повлияло на внутреннюю политику многих стран.

  ### Экономическое развитие: Холодная война стимулировала экономический рост в США и СССР, но также имела негативные последствия для экономического развития многих других стран.

  ### Развитие науки и технологий: Гонка вооружений стимулировала развитие науки и технологий, особенно в области ядерной физики, космических исследований и информационных технологий.

## Последствия Холодной войны:
  Распад СССР: Распад СССР и конец биполярного мира.

  Новые геополитические реалии: Возникновение новых центров силы, усиление роли международных организаций.

  Изменение мирового порядка: Переход к многополярному миру.

  Проблемы перехода: Многочисленные проблемы в бывших социалистических странах, в том числе экономические и социальные.

  Холодная война – сложный и многогранный исторический период. Тема может быть дополнена анализом конкретных событий, исследованием роли различных личностей, и изучением влияния Холодной войны на культуру и общество.`
          }
        ]
      },
      {
        id: 5,
        name: "Русский язык",
        description: "Правила Русского языка и основы грамотного написания",
        topics: [
          {
            id: 501,
            title: "Функциональные стили речи и их особенности",
            content: `# Понятие функционального стиля:

## Функциональный стиль речи – это разновидность литературного языка, которая используется в определённой сфере общения и характеризуется специфическими языковыми средствами. Выбор стиля определяется целью коммуникации, аудиторией и ситуацией общения.

## Основные функциональные стили:
  Разговорный стиль: Используется в непринуждённом общении, характеризуется простотой и неформальностью. Часто используется сокращения слов, просторечные выражения, интонация играет важную роль.

  Научный стиль: Используется в научной литературе, характеризуется точностью, однозначностью, логичностью. Часто используются термины, сложные предложения, пассивный залог.

  Официально-деловой стиль: Используется в документах, законодательных актах, характеризуется точностью, формальностью, стандартизованностью. Используются клише, специальная лексика, строгая структура текста.

  Публицистический стиль: Используется в средствах массовой информации, характеризуется эмоциональностью, образностью, призывностью. Часто используются риторические вопросы, метафоры, эпитеты.

  Художественный стиль: Используется в художественной литературе, характеризуется образностью, эмоциональностью, индивидуальностью. Используются разнообразные тропы (метафоры, эпитеты, сравнения), фигуры речи (риторические вопросы, инверсия).

## Основные признаки функциональных стилей:
## Каждый стиль характеризуется:

  Лексикой: Набор слов, характерный для данной сферы общения.

  Морфологией: Использование определённых грамматических форм и категорий.

  Синтаксисом: Построение предложений, тип предложений.

  Композицией: Структура текста.

## Примеры:
  Разговорный: "Привет! Как дела? Слушай, у меня такая история..."

  Научный: "В результате эксперимента было установлено, что... Данные свидетельствуют о..."

  Официально-деловой: "В соответствии с договором №... Настоящим подтверждается..."

  Публицистический: "Сегодня мы обсудим актуальную проблему... Важно отметить, что..."

  Художественный: "Ветер шёл по степи, гнуя высокую траву... Солнце садилось, окрашивая небо в багровые тона..."

## Смешение стилей:
  В речи часто наблюдается смешение стилей, что может быть обусловлено различными причинами (например, ирония, сатира, использование разговорных элементов в публицистике). Однако, умение правильно выбирать стиль речи важно для эффективной коммуникации.

Тема функциональных стилей может быть расширена анализом конкретных текстов, сравнением различных стилей, изучением стилистических ошибок и путей их исправления. Можно также рассмотреть более узкие разновидности функциональных стилей (например, научно-популярный стиль, официально-документальный).`
          }
        ]
      },
      {
        id: 6,
        name: "Литература",
        description: "Литературные произведения великих Русских поэтов",
        topics: [
          {
            id: 601,
            title: "Образ «лишнего человека» в русской литературе XIX века",
            content: `# Понятие «лишнего человека»:

## «Лишний человек» — это распространенный литературный тип в русской литературе XIX века. Это герой, обладающий высокими интеллектуальными способностями, чувством собственного достоинства и критическим отношением к окружающему миру, но не находит себе места в обществе и не может реализовать свой потенциал. Он разочарован в общественной жизни, часто страдает от одиночества и испытывает внутренний конфликт.

## Основные черты «лишнего человека»:
  Высокий интеллект и развитое чувство собственного достоинства: Герой обладает острым умом, способен к самоанализу и критично оценивает окружающую действительность.

## Разочарование в обществе: 
  Герой не находит себе места в существующем обществе, разочарован в общественных институтах и предрассудках.

## Неспособность к активной деятельности: 
  Герой часто пассивен, не может или не хочет принимать участие в общественной жизни, пребывает в состоянии апатии или занимается бесцельной деятельностью.

## Индивидуализм и эгоцентризм: 
  Герой склонен к самокопанию, сосредоточен на своих внутренних переживаниях, часто пренебрегает интересами других людей.

## Трагическая судьба: Судьба 
  «лишнего человека» обычно трагична: он умирает, сходит с ума или остаётся в одиночестве и отчаянии.

## Примеры «лишних людей» в русской литературе:
  Евгений Онегин (А.С. Пушкин): Образцы «лишнего человека» в наиболее чистом виде. Онегин — высокоинтеллектуальный дворянин, разочарованный в светской жизни, не нашедший себя ни в любви, ни в общественной деятельности.

  Григорий Печорин («Герой нашего времени» М.Ю. Лермонтова): Ещё более сложный и противоречивый тип «лишнего человека». Печорин — человек сильной воли, но его цинизм и эгоизм разрушают его жизнь и жизни окружающих.

  Раскольников («Преступление и наказание» Ф.М. Достоевского): Несмотря на то, что Раскольников пытается изменить существующий порядок вещей, он так же является «лишним человеком», т.к. не может примириться с обществом, его идея превосходства отдельной личности над моралью терпит крах.

  Обломов («Обломов» И.А. Гончарова): Он воплощает пассивный тип «лишнего человека», жизнь которого — бесконечное лежание на диване и углубление в состояние апатии.

## Эволюция образа «лишнего человека»:
  Образ «лишнего человека» эволюционирует в течение XIX века: от апатичного Онегина к активному, но разрушительному Печорину, затем к трагически несчастному Раскольникову и пассивному Обломову. Эта эволюция отражает изменения в русском обществе и в самом понимании человека.

Тема может быть расширена анализом конкретных произведений, сравнением различных образов «лишних людей», исследованием причин возникновения этого типа в русской литературе и его значения. Можно также рассмотреть влияние социально-исторических условий на формирование образа «лишнего человека».`
          }
        ]
      },
    ]
  },
  {
    id: 2,
    name: "Второй курс",
    subjects: [
      {
        id: 205,
        name: "Программирование",
        description: "Основы алгоритмизации и программирования",
        topics: [
          {
            id: 115,
            title: "Введение JavaScript",
            content: `# Введение в JavaScript

## Добро пожаловать на вводную лекцию по JavaScript! На четвертом курсе мы погрузимся в мир одного из самых популярных языков программирования, который стал основой для разработки веб-приложений и интерактивных интерфейсов. JavaScript — это язык, который позволяет создавать динамичные и отзывчивые веб-страницы, а также разрабатывать серверные приложения и мобильные приложения.

В ходе курса мы начнем с основ JavaScript, изучая синтаксис, типы данных и операторы. Вы познакомитесь с переменными, функциями и структурами управления, такими как условные операторы и циклы. Понимание этих базовых концепций является ключевым для дальнейшего изучения более сложных тем.

Одной из важнейших особенностей JavaScript является его асинхронная природа. Мы рассмотрим, как работать с асинхронными операциями, используя колбэки, промисы и async/await. Эти концепции помогут вам эффективно управлять выполнением кода и обрабатывать данные, полученные из внешних источников, таких как API.

Далее мы перейдем к объектно-ориентированному программированию (ООП) в JavaScript. Вы узнаете, как создавать и использовать объекты, а также как применять наследование и полиморфизм. ООП позволяет организовывать код более структурированно и делает его более удобным для сопровождения и расширения.

## Также мы уделим внимание работе с DOM (Document Object Model) — интерфейсом, который позволяет взаимодействовать с HTML и CSS. Вы научитесь изменять содержимое веб-страниц, обрабатывать события и создавать интерактивные элементы, такие как формы и кнопки. Это знание является основой для создания современных веб-приложений.

Важной частью курса будет изучение популярных библиотек и фреймворков, таких как jQuery, React и Vue.js. Эти инструменты значительно упрощают разработку и позволяют создавать сложные интерфейсы с минимальными усилиями. Мы рассмотрим, как интегрировать эти технологии в ваши проекты и использовать их для повышения производительности и удобства разработки.

Практические занятия будут включать создание небольших проектов, где вы сможете применить полученные знания на практике. Вы будете работать над реальными задачами, что поможет вам развить навыки решения проблем и научиться эффективно использовать JavaScript в различных контекстах.

В конце курса вы сможете уверенно разрабатывать веб-приложения, используя JavaScript, а также понимать, как взаимодействовать с другими технологиями и инструментами в экосистеме веб-разработки. Знание JavaScript откроет перед вами множество возможностей в сфере IT и поможет вам стать востребованным специалистом.

## Желаю всем успехов в изучении JavaScript! Надеюсь, что этот курс станет для вас увлекательным и полезным опытом, который поможет вам в вашей профессиональной деятельности.
`
          },
          {
            id: 115,
            title: "Переменные и типы данных Javascript",
            content: `# Переменные и типы данных

## Основные типы данных:
- Целые числа (int)
- Числа с плавающей точкой (float)
- Строки (string)
- Логические значения (boolean)

## Объявление переменных:
\`\`\`javascript
let age = 25;
const name = "Иван";
var isStudent = true;
\`\`\`

### Правила именования переменных:
1. Используйте осмысленные имена
2. Начинайте с буквы
3. Используйте camelCase
4. Избегайте зарезервированных слов`
          }
        ]
      },
      {
        id: 207,
        name: "Теория вероятностей",
        description: "Основы Теории вероятностей и математическая статистика",
        topics: [
          {
            id: 2301,
            title: "Вводная лекция Теория вероятностей и математическая статистика",
            content: `# Вводная лекция Теория вероятностей и математическая статистика

Добро пожаловать на вводную лекцию по теории вероятностей и математической статистике! На четвертом курсе мы будем изучать основные концепции и методы, которые лежат в основе анализа данных и принятия решений в условиях неопределенности.

Теория вероятностей предоставляет инструменты для моделирования случайных явлений и оценки рисков. Мы рассмотрим ключевые понятия, такие как случайные величины, распределения, математическое ожидание и дисперсия. Эти знания помогут вам понять, как оценивать вероятность различных событий и делать обоснованные прогнозы.

Математическая статистика, в свою очередь, фокусируется на сборе, анализе и интерпретации данных. Мы изучим методы выборочного наблюдения, оценивания параметров и проверки гипотез. Эти навыки необходимы для анализа реальных данных и принятия решений на основе статистических выводов.

Практические занятия будут включать решение задач, работу с реальными данными и использование статистического программного обеспечения. В конце курса вы сможете применять полученные знания для анализа данных в различных областях, таких как экономика, социология и инженерия. Желаю всем успехов в изучении этой увлекательной дисциплины!
`
          }
        ]
      },
    ]
  },
  {
    id: 3,
    name: "Третий курс",
    subjects: [
      {
        id: 301,
        name: "Язык JAVA",
        description: "Основы Java",
        topics: [
          {
            id: 3101,
            title: "Язык JAVA",
            content: `# Ввеодная лекция в язык Java

## Добро пожаловать на вводную лекцию по Java! На третьем курсе мы погрузимся в мир одного из самых популярных и широко используемых языков программирования, который стал основой для разработки корпоративных приложений, мобильных приложений и веб-сервисов. Java известна своей платформенной независимостью, что делает её идеальным выбором для создания кросс-платформенных решений.

В начале курса мы изучим основы Java, включая синтаксис, типы данных, операторы и управление потоком. Вы познакомитесь с переменными, условными операторами и циклами, что является необходимым для понимания более сложных концепций. Мы также обсудим важность компиляции и выполнения кода в среде Java.

Одной из ключевых особенностей Java является объектно-ориентированное программирование (ООП). Мы подробно рассмотрим основные принципы ООП: инкапсуляцию, наследование и полиморфизм. Вы научитесь создавать классы и объекты, а также использовать интерфейсы и абстрактные классы для организации кода. ООП позволяет создавать более структурированные и поддерживаемые приложения.

Далее мы перейдем к обработке исключений и работе с коллекциями. Вы узнаете, как управлять ошибками в Java с помощью механизма обработки исключений, что поможет вам создавать более надежные приложения. Мы также изучим стандартные коллекции Java, такие как списки, множества и карты, которые облегчают работу с группами данных.

## Важной частью курса будет работа с Java API и библиотеками. Вы познакомитесь с основными библиотеками, такими как Java Standard Library, и научитесь использовать их для решения различных задач. Мы также рассмотрим, как подключать сторонние библиотеки и фреймворки, такие как Spring и Hibernate, которые значительно упрощают разработку сложных приложений.

Практические занятия будут включать создание небольших проектов, где вы сможете применить полученные знания на практике. Вы будете работать над реальными задачами, что поможет вам развить навыки решения проблем и научиться эффективно использовать Java в различных контекстах.

Кроме того, мы обсудим основы многопоточности и параллельного программирования в Java. Вы узнаете, как создавать многопоточные приложения и управлять потоками, что является важным аспектом разработки высокопроизводительных систем.

В конце курса вы сможете уверенно разрабатывать приложения на Java, понимать, как взаимодействовать с различными библиотеками и фреймворками, а также применять принципы ООП для создания структурированного и поддерживаемого кода. Знание Java откроет перед вами множество возможностей в сфере IT и поможет вам стать востребованным специалистом.

## Желаю всем успехов в изучении Java! Надеюсь, что этот курс станет для вас увлекательным и полезным опытом, который поможет вам в вашей профессиональной деятельности.
`
          }
        ]
      }
    ]
  },
  {
    id: 4,
    name: "Четвёртый курс",
    subjects: [
      {
        id: 409,
        name: "Английский язык",
        description: "Английский язык для будущей профессии",
        topics: [
          {
            id: 4101,
            title: "Вводная лекция",
            content: `# Вводная лекция в Английский язык в профессиональной деятельности

Добро пожаловать на вводную лекцию по английскому языку в профессиональной деятельности! На четвертом курсе мы сосредоточимся на развитии навыков, необходимых для успешного общения в международной среде. Английский язык стал глобальным языком бизнеса, и его знание открывает множество возможностей для карьерного роста.

В ходе курса мы будем изучать специализированную лексику, грамматические конструкции и стили общения, которые используются в различных профессиональных областях, таких как маркетинг, финансы, технологии и медицина. Мы также рассмотрим важность межкультурной коммуникации и навыков ведения переговоров.

Практические занятия будут включать ролевые игры, презентации и анализ реальных кейсов, что поможет вам уверенно применять английский язык в профессиональных ситуациях. Мы будем работать над улучшением навыков аудирования, говорения, чтения и письма, чтобы вы могли эффективно взаимодействовать с коллегами и клиентами.

В конце курса вы сможете не только свободно общаться на английском, но и адаптироваться к различным культурным контекстам, что является ключевым аспектом успешной профессиональной деятельности. Желаю всем удачи и вдохновения в изучении!`
          }
        ]
      },
      {
        id: 411,
        name: "Микроэкономика",
        description: "Основы экономической теории",
        topics: [
          {
            id: 4301,
            title: "Спрос и предложение",
            content: `# Спрос и предложение

## Закон спроса и предложения
Основной закон рыночной экономики, описывающий взаимодействие покупателей и продавцов.

### Факторы, влияющие на спрос:
1. Цена товара
2. Доходы потребителей
3. Предпочтения потребителей
4. Ожидания`
          }
        ]
      },
    ]
  },
];